@startuml
/' @author @ailanthustng'/

skinparam backgroundColor #ffffff
skinparam classAttributeIconSize 0
hide circle


abstract class Command {
    {abstract} execute(splitterModel:SplitterModel) : CommandResult
}

class ClearReceiptCommand extends Command {
    /' Fields '/

    /' Methods '/
    + execute(splitterModel : SplitterModel) : CommandResult
}

interface SplitterModel <<Interface>> {
    + addEntry(entry : Entry) : void
    + deleteEntry(index : int) : void
    + getEntry(entry : Entry) : Entry
    + paidPerson(person : Person, amountPaid : String) : void
    + listAmount() : String
    + listReceipt() : String
    + getReceipt() : Receipt
    + clearReceipt() : void
    + isReceiptDone() : boolean
    + hasPerson(person : Person) : boolean
    + addPerson(person : Person) : void
    + getPerson(person : Person) : Person
    + addAmount(person : Person, amount : Amount) : void
    + removeAmount(person : Person, amount : Amount) : void
    + getReceiptBook() : ReadOnlyReceiptBook
    + updateFilteredPersonList(predicate : Predicate<Person>) : void
    + getFilteredPersonList() : ObservableList<Person>
}

class SplitterModelManager implements SplitterModel {
    /' Fields '/
    - Receipt : receipt

    /' Methods '/
    + clearReceipt() : void
    + getReceipt() : Receipt
}

class Receipt {
    /' Fields '/
    - ArrayList<Entry> : receipt
    - boolean : isDone

    /' Methods '/
    + clearReceipt() : void
    + makeUndone() : void
}


ClearReceiptCommand ..> SplitterModel
SplitterModelManager *-right->"1" Receipt


@enduml