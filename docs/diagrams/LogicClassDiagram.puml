@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class "{abstract}\nCommonParser" as CommonParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Interface SplitterLogic <<Interface>>
Interface DietLogic <<Interface>>
Class SplitterLogicManager
Class DietLogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

SplitterLogic -left-|> Logic
DietLogic -left-|> Logic
DietLogic -[hidden]up-> SplitterLogic

SplitterLogicManager .up.|> SplitterLogic
DietLogicManager .up.|> DietLogic
SplitterLogicManager -down->"1" CommonParser
DietLogicManager -down->"1" CommonParser
SplitterLogicManager ..> CommandResult
DietLogicManager ..> CommandResult
SplitterLogicManager ..> Command : execute >
DietLogicManager ..> Command : execute >

CommonParser .left.> XYZCommandParser: creates >
XYZCommandParser .right.> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
Command .right.> Model
Command .up.> CommandResult



@enduml
